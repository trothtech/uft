# Copyright 1995-2025 Richard M. Troth, all rights reserved. <plaintext>
#
#         Name: .../posixuft/src/makefile.in
#               make file source for UFTD and UFTC (Internet SENDFILE)
#               to be modified by 'configure' and written as "makefile"
#         Date: 1995-Jan-10, Oct-05, 1997-Feb-02, 2024-03-17
#

APPLID          =       uft
VERSION         =       2.0.2
DELIVERABLES    =       uftd sf rls rcv uftcndd tell
SOURCEURL       =       https://raw.githubusercontent.com/trothtech/uft/refs/heads/main
#                       https://raw.githubusercontent.com/trothtech/uft/master

##### configuration #####

PREFIX          =       %PREFIX%
LDFLAGS         =       %LDFLAGS%
LIBS            =       %LIBS%
CFLAGS          =       %CFLAGS% -DPREFIX=\"$(PREFIX)\"
SHFLAGS         =       %SHFLAGS%
# we may later use CC, CXX, CPP, CPPFLAGS, and/or CXXFLAGS

LOCDIR          =       %LOCDIR%
LOCALE          =       %LOCALE%

.PHONY: 	clean distclean config help

all:		$(DELIVERABLES)
#		maketext cpq cpqu msgpipe msgcat msgd

uftd:		makefile uftd.o \
			uftdnext.o uftddata.o uftduser.o \
			uftdmove.o uftdimsg.o uftdlmsg.o uftdlist.o uftdcpq.o \
			abbrev.o tcpio.o aecs.o uftlib.o xmitmsgx.o
		$(CC) $(LDFLAGS) -o uftd uftd.o \
			uftdnext.o uftddata.o uftduser.o \
			uftdmove.o uftdimsg.o uftdlmsg.o uftdlist.o uftdcpq.o \
			abbrev.o tcpio.o aecs.o uftlib.o xmitmsgx.o $(LIBS)

uftdnext.o:	makefile uft.h uftdnext.c
		$(CC) $(CFLAGS) -c uftdnext.c

uftddata.o:	makefile uft.h uftddata.c
		$(CC) $(CFLAGS) -c uftddata.c

uftduser.o:	makefile uft.h uftduser.c
		$(CC) $(CFLAGS) -c uftduser.c

uftdmove.o:	makefile uft.h uftdmove.c
		$(CC) $(CFLAGS) -c uftdmove.c

uftdimsg.o:	makefile uft.h uftdimsg.c
		$(CC) $(CFLAGS) -c uftdimsg.c

uftdlmsg.o:	makefile uft.h uftdlmsg.c
		$(CC) $(CFLAGS) -c uftdlmsg.c

uftdlist.o:	makefile uft.h uftdlist.c
		$(CC) $(CFLAGS) -c uftdlist.c

uftdcpq.o:	makefile uft.h uftdcpq.c
		$(CC) $(CFLAGS) -o uftdcpq.o -c uftdcpq.c

uftd.o: 	makefile uft.h uftd.c
		$(CC) $(CFLAGS) -o uftd.o -c uftd.c

sf:		makefile uftc.o \
			uftctext.o uftcprot.o \
			uftlib.o tcpio.o xmitmsgx.o \
			aecs.o abbrev.o
		$(CC) $(LDFLAGS) -o sf uftc.o \
			uftctext.o uftcprot.o \
			uftlib.o tcpio.o xmitmsgx.o \
			aecs.o abbrev.o $(LIBS)

uftc.o: 	makefile uft.h uftc.c
		$(CC) $(CFLAGS) -c uftc.c

uftctext.o:	makefile uft.h uftctext.c
		$(CC) $(CFLAGS) -c uftctext.c

uftcprot.o:	makefile uft.h uftcprot.c
		$(CC) $(CFLAGS) -c uftcprot.c

uftcnote.h:	makefile uftcnote.txt
		cat uftcnote.txt > uftcnote.tmp
		echo "" >> uftcnote.tmp
		echo "char *uftcnote[" \
			`cat uftcnote.tmp | wc -l` "] = {" > uftcnote.h
		rm uftcnote.tmp
		awk '{print "\"" $$0 " \","}' \
			< uftcnote.txt >> uftcnote.h
		echo "\"\"};" >> uftcnote.h

uftcmime:	makefile uftcmime.c uftcnote.h
		$(CC) $(CFLAGS) -o uftcmime uftcmime.c $(LIBS)

uftcndd:	makefile uftcndd.c uft.h
		$(CC) $(CFLAGS) -o uftcndd uftcndd.c $(LIBS)

maketext:	makefile maketext.o tcpio.o aecs.o
		$(CC) $(CFLAGS) -o maketext \
			maketext.o tcpio.o aecs.o $(LIBS)

cpq:		makefile cpq.o \
			tcpio.o aecs.o
		$(CC) $(LDFLAGS) -o cpq cpq.o \
			tcpio.o aecs.o $(LIBS)

cpqu:		makefile cpqu.o \
			tcpio.o aecs.o
		$(CC) $(LDFLAGS) -o cpqu cpqu.o \
			tcpio.o aecs.o $(LIBS)

clean:
		rm -f core a.out *.o *.a *.lst CEEDUMP.* \
			uftd sf maketext cpq cpqu uftcmime \
			tell msgpipe msgcat msgd imsg uftcndd ufta
		sh -c ' cd xmitmsgx ; exec $(MAKE) clean '

distclean:
		rm -f core a.out *.o *.a *.lst CEEDUMP.* \
			uftd sf maketext cpq cpqu uftcmime \
			tell msgpipe msgcat msgd imsg uftcndd ufta \
			*:* *';'* makefile Makefile makefile.old \
			uft.spec configure.sh configure.h *.rpm *.log .rpmseq
		rm -rf rpmbuild.d
		sh -c ' cd xmitmsgx ; exec $(MAKE) distclean '

#makefile:	makefile.in configure
#		@echo "$(MAKE): makefile is out of synch"
#		@echo "$(MAKE): you need to re-run ./configure"
#		@false

help:
		@echo "$(MAKE):"
		@echo "$(MAKE): this is the build logic for UFT, POSIX 'sendfile'"
		@echo "$(MAKE):"

#
#
#

abbrev.o:	makefile abbrev.c
		$(CC) $(CFLAGS) -c abbrev.c

tcpio.o:	makefile tcpio.c
		$(CC) $(CFLAGS) -c tcpio.c

maketext.o:	makefile maketext.c
		$(CC) $(CFLAGS) -c maketext.c

cpq.o:		makefile cpq.c
		$(CC) $(CFLAGS) -c cpq.c

cpqu.o:		makefile cpqu.c
		$(CC) $(CFLAGS) -c cpqu.c

aecs.o: 	makefile aecs.c aecs.h
		$(CC) $(CFLAGS) -c aecs.c

#readspan.o:	makefile readspan.c
#		$(CC) $(CFLAGS) -c readspan.c

xmitmsgx.o:
	sh -c ' cd xmitmsgx ; exec $(MAKE) xmitmsgx.o '
	cp -p xmitmsgx/xmitmsgx.o .

uftlib.o:	makefile uft.h uftlib.c
		$(CC) $(CFLAGS) -o uftlib.o -c uftlib.c

anonymous:
		$(CC) $(CFLAGS) -DUFT_ANONYMOUS -o uftd.o -c uftd.c
		$(CC) $(CFLAGS) -DUFT_ANONYMOUS -o uftdcpq.o -c uftdcpq.c
		$(CC) $(CFLAGS) -DUFT_ANONYMOUS -o uftduser.o -c uftduser.c
		@rm -f uftd
		$(MAKE) uftd
		mv uftd ufta

#
#	  Name: makefile.in (make file source)
#		processed by 'congifure' to make a makefile for MSG
#	Author: Rick Troth, Houston, Texas, USA
#	  Date: 1997-Mar-23 (Sun)
#

secure: 	default
		chgrp msg tell msgd
		chmod g+s tell msgd

msgcat: 	makefile msgpipe
		rm -f msgcat
		ln msgpipe msgcat

msgpipe:	makefile msgpipe.o
		$(CC) -o msgpipe msgpipe.o
		strip msgpipe

msgd:		makefile msgd.o msgdlmsg.o \
			tcpio.o aecs.o homedir.o
		$(CC) -o msgd msgd.o msgdlmsg.o \
			tcpio.o aecs.o homedir.o
		strip msgd

tell:		makefile msgc.o uftlib.o tcpio.o xmitmsgx.o \
		  uftctext.o uftcprot.o aecs.o abbrev.o
	$(CC) $(LDFLAGS) -o tell msgc.o uftlib.o tcpio.o xmitmsgx.o \
		  uftctext.o uftcprot.o aecs.o abbrev.o $(LIBS)
	strip tell
# msgcmsp.o msgcuftd.o msglocal.o homedir.o

imsg:		makefile imsg.o aecs.o
		$(CC) -o imsg imsg.o aecs.o
		strip imsg

imsg.o: 	makefile uft.h imsg.c
		$(CC) -c imsg.c

msgcmsp.o: 	makefile uft.h msgcmsp.c
		$(CC) -c msgcmsp.c

msgcuftd.o:	makefile uft.h msgcuftd.c
		$(CC) -c msgcuftd.c

msglocal.o:	makefile uft.h msglocal.c
		$(CC) -c msglocal.c

msgpipe.o:	makefile msgpipe.c
		$(CC) -c msgpipe.c

msgc.o: 	makefile uft.h msgc.c
		$(CC) -c msgc.c

msgd.o: 	makefile uft.h msgd.c
		$(CC) -c msgd.c

msgdlmsg.o:	makefile uft.h msgdlmsg.c
		$(CC) -c msgdlmsg.c

homedir.o:	makefile homedir.c
		$(CC) -c homedir.c

#install:	sf uftd cpq cpqu tell msgcat maketext msgpipe msgd
#		mv sf cpq cpqu tell msgcat $(PREFIX)/bin/.
#		mv maketext msgpipe $(PREFIX)/lib/.
#		mv uftd msgd $(PREFIX)/sbin/.
install:	$(DELIVERABLES)
		mkdir -p $(PREFIX)/bin $(PREFIX)/etc/xinetd.d \
			$(PREFIX)/share/locale/$(LOCALE) $(PREFIX)/libexec
		cp -p sf rls rcv uftcndd tell $(PREFIX)/bin/.
#		cp -p uftd $(PREFIX)/sbin/.
		cp -p uftd $(PREFIX)/libexec/.
		cp -p uft.inet $(PREFIX)/etc/xinetd.d/uft
		cp -p uft.msgs $(PREFIX)/share/locale/$(LOCALE)/.

########################################################################
# RPM support

# http://ftp.rpm.org/max-rpm/s1-rpm-build-creating-spec-file.html
uft.rpm:        uft.spec
#		rpmbuild -bb --nodeps uft.spec
		./rpmbuild.sh $(APPLID) $(VERSION)
#		rpm -bb uft.spec
##		rpm -ba ?
#		new -d /usr/src/*/RPMS/*/uft-*.rpm .

#
uft.spec:       uft.spec.in
		@echo "$(MAKE): checking required variables"
#		test ! -z "$(UNAMEM)" # UNAMEM
#		test ! -z "$(RELEASE)" # RELEASE
#		test ! -z "$(STAGING)" # STAGING
		cat uft.spec.in \
		  | sed 's#%SPEC_PREFIX%#$(PREFIX)#g' \
		  | sed 's#%SPEC_APPLID%#$(APPLID)#g' \
		  | sed 's#%SPEC_VERSION%#$(VERSION)#g' \
		  | sed 's#%SPEC_RELEASE%#$(RELEASE)#g' \
		  | sed 's#%SPEC_UNAMEM%#$(UNAMEM)#g' \
		  | sed 's#%SPEC_STAGING%#$(STAGING)#g' \
                  | sed 's#%SPEC_LOCDIR%#$(LOCDIR)#g' \
                  | sed 's#%SPEC_LOCALE%#$(LOCALE)#g' \
		  > uft.spec

#Get yourself an easy source package, e.g. telnet-*-.src.rpm and do an
# rpm -i telnet-*.src.rpm
# cd /usr/src/redhat/SPECS  - see the  .spec  file

#Now the .spec file tells how to unpack, patch, configure, compile, etc.
#And it tells what files go into the final deliverable, and what scripts
#run at installation (or removal) time.
#You can even do a 'rpm -ba telnet.spec' so it will build a new .src.rpm
#file (assuming you did patches etc in it).

#Rob

rpmbuild:
		rpm -bc --short-circuit uft.spec


